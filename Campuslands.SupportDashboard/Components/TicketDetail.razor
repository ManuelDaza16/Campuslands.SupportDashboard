@using Campuslands.SupportDashboard.Models

<div class="card h-100 border-0 bg-light-subtle">
    @if (Ticket is null)
    {
        <div class="card-body d-flex align-items-center justify-content-center text-muted" style="min-height: 260px">
            Selecciona un ticket para ver el detalle
        </div>
    }
    else
    {
        <div class="card-body">
            <h5 class="mb-3">@Ticket.Title</h5>
            <div class="mb-2">
                <span class="badge rounded-pill @GetStatusBadge(Ticket.Status)">@Ticket.Status</span>
            </div>
            <p class="text-secondary">@Ticket.Description</p>
            <div class="small text-muted mb-4">Created @Ticket.CreatedAt.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</div>

            <div class="row g-2 align-items-center mb-3">
                <div class="col-7">
                    <select class="form-select form-select-sm" @bind="pendingStatus">
                        <option value="Abierto">Abierto</option>
                        <option value="En progreso">En progreso</option>
                        <option value="Cerrado">Cerrado</option>
                    </select>
                </div>
                <div class="col-5 text-end">
                    <button class="btn btn-primary btn-sm" @onclick="UpdateStatus" disabled="@(!CanUpdate || isSaving)">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                        }
                        Actualizar
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Ticket? Ticket { get; set; }
    [Parameter] public EventCallback<string> OnStatusChange { get; set; }

    private string pendingStatus = "Abierto";
    private bool isSaving = false;
    private bool CanUpdate => Ticket is not null && pendingStatus != Ticket.Status;

    protected override void OnParametersSet()
    {
        if (Ticket is not null)
        {
            pendingStatus = Ticket.Status;
        }
    }

    private async Task UpdateStatus()
    {
        if (Ticket is null || !CanUpdate) return;
        isSaving = true; StateHasChanged();
        await OnStatusChange.InvokeAsync(pendingStatus);
        isSaving = false; StateHasChanged();
    }

    private string GetStatusBadge(string status) => status switch
    {
        // Use bg-* for wider Bootstrap compatibility
        "Abierto" => "bg-primary",
        "En progreso" => "bg-warning text-dark",
        "Cerrado" => "bg-success",
        _ => "text-bg-secondary"
    };
}
