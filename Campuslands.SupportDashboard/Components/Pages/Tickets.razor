@page "/tickets"
@rendermode InteractiveServer
@inject Campuslands.SupportDashboard.Services.TicketService TicketService

<h3 class="mb-3">Lista de Tickets de Soporte</h3>

<div class="mb-3">
    <label for="filter" class="me-2"><b>Filtrar por estado:</b></label>
    <select id="filter" @onchange="FilterByStatus" class="form-select w-auto d-inline-block">
        <option value="">Todos</option>
        <option value="Abierto">Abierto</option>
        <option value="En progreso">En progreso</option>
        <option value="Cerrado">Cerrado</option>
    </select>
    
</div>

<ul class="list-group">
    @if (filteredTickets == null)
    {
        <li class="list-group-item">Cargando tickets...</li>
    }
    else if (filteredTickets.Count == 0)
    {
        <li class="list-group-item">No hay tickets disponibles.</li>
    }
    else
    {
        @foreach (var ticket in filteredTickets)
        {
            <li class="list-group-item" @onclick="() => SelectTicket(ticket)">
                <b>@ticket.Title</b> — <span>@ticket.Status</span>
            </li>
        }
    }
</ul>

@if (selectedTicket != null)
{
    <div class="card mt-4 p-3">
        <h5>@selectedTicket.Title</h5>
        <p>@selectedTicket.Description</p>
        <p><b>Estado actual:</b> @selectedTicket.Status</p>
        <div>
            <label><b>Cambiar estado:</b></label>
            <select value="@selectedTicket.Status" @onchange="ChangeStatus" class="form-select w-auto d-inline-block ms-2">
                <option value="">Seleccionar...</option>
                <option value="Abierto">Abierto</option>
                <option value="En progreso">En progreso</option>
                <option value="Cerrado">Cerrado</option>
            </select>
        </div>
    </div>
}

@code {
    private List<Campuslands.SupportDashboard.Models.Ticket> tickets = new();
    private List<Campuslands.SupportDashboard.Models.Ticket>? filteredTickets;
    private Campuslands.SupportDashboard.Models.Ticket? selectedTicket;
    private string currentFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        tickets = await TicketService.GetTicketsAsync();
        ApplyFilter();
    }

    private void FilterByStatus(ChangeEventArgs e)
    {
        currentFilter = e.Value?.ToString() ?? string.Empty;
        ApplyFilter();
    }

    private void SelectTicket(Campuslands.SupportDashboard.Models.Ticket ticket)
    {
        selectedTicket = ticket;
    }

    private async Task ChangeStatus(ChangeEventArgs e)
    {
        var newStatus = e.Value?.ToString();
        if (selectedTicket != null && !string.IsNullOrEmpty(newStatus))
        {
            await TicketService.UpdateStatusAsync(selectedTicket.Id, newStatus);
            selectedTicket.Status = newStatus;
            // Reaplicar el filtro tras el cambio de estado
            ApplyFilter();
            // Si el ticket seleccionado ya no está en la lista filtrada, limpiar la selección
            if (filteredTickets != null && !filteredTickets.Contains(selectedTicket))
            {
                selectedTicket = null;
            }
        }
    }

    private void ApplyFilter()
    {
        if (string.IsNullOrWhiteSpace(currentFilter))
        {
            filteredTickets = tickets;
        }
        else
        {
            filteredTickets = tickets
                .Where(t => t.Status.Equals(currentFilter, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }
}
